"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_systemd"],{

/***/ "./node_modules/refractor/lang/systemd.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/systemd.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = systemd\nsystemd.displayName = 'systemd'\nsystemd.aliases = []\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;(function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    }\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(\n          /(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n            '(?:' +\n            quotesSource +\n            '|(?=[^\"\\r\\n]))' + // main loop\n            '(?:' +\n            (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n              '|' +\n              '[ \\t]+(?:(?![ \\t\"])|' +\n              quotesSource +\n              ')' + // line continuation\n              '|' +\n              /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    }\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3lzdGVtZC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0JBQWtCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL3N5c3RlbWQuanM/NGI5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzeXN0ZW1kXG5zeXN0ZW1kLmRpc3BsYXlOYW1lID0gJ3N5c3RlbWQnXG5zeXN0ZW1kLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gc3lzdGVtZChQcmlzbSkge1xuICAvLyBodHRwczovL3d3dy5mcmVlZGVza3RvcC5vcmcvc29mdHdhcmUvc3lzdGVtZC9tYW4vc3lzdGVtZC5zeW50YXguaHRtbFxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBjb21tZW50ID0ge1xuICAgICAgcGF0dGVybjogL15bOyNdLiovbSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgICB2YXIgcXVvdGVzU291cmNlID0gL1wiKD86W15cXHJcXG5cIlxcXFxdfFxcXFwoPzpbXlxccl18XFxyXFxuPykpKlwiKD8hXFxTKS8uc291cmNlXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnN5c3RlbWQgPSB7XG4gICAgICBjb21tZW50OiBjb21tZW50LFxuICAgICAgc2VjdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvXlxcW1teXFxuXFxyXFxbXFxdXSpcXF0oPz1bIFxcdF0qJCkvbSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXFt8XFxdJC8sXG4gICAgICAgICAgJ3NlY3Rpb24tbmFtZSc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBrZXk6IHtcbiAgICAgICAgcGF0dGVybjogL15bXlxccz1dKyg/PVsgXFx0XSo9KS9tLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnYXR0ci1uYW1lJ1xuICAgICAgfSxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIC8vIFRoaXMgcGF0dGVybiBpcyBxdWl0ZSBjb21wbGV4IGJlY2F1c2Ugb2YgdHdvIHByb3BlcnRpZXM6XG4gICAgICAgIC8vICAxKSBRdW90ZXMgKHN0cmluZ3MpIG11c3QgYmUgcHJlY2VkZWQgYnkgYSBzcGFjZS4gU2luY2Ugd2UgY2FuJ3QgdXNlIGxvb2tiZWhpbmRzLCB3ZSBoYXZlIHRvIFwicmVzb2x2ZVwiXG4gICAgICAgIC8vICAgICB0aGUgbG9va2JlaGluZC4gWW91IHdpbGwgc2VlIHRoaXMgaW4gdGhlIG1haW4gbG9vcCB3aGVyZSBzcGFjZXMgYXJlIGhhbmRsZWQgc2VwYXJhdGVseS5cbiAgICAgICAgLy8gIDIpIExpbmUgY29udGludWF0aW9ucy5cbiAgICAgICAgLy8gICAgIEFmdGVyIGxpbmUgY29udGludWF0aW9ucywgZW1wdHkgbGluZXMgYW5kIGNvbW1lbnRzIGFyZSBpZ25vcmVkIHNvIHdlIGhhdmUgdG8gY29uc3VtZSB0aGVtLlxuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgLyg9WyBcXHRdKig/IVxccykpLy5zb3VyY2UgKyAvLyB0aGUgdmFsdWUgZWl0aGVyIHN0YXJ0cyB3aXRoIHF1b3RlcyBvciBub3RcbiAgICAgICAgICAgICcoPzonICtcbiAgICAgICAgICAgIHF1b3Rlc1NvdXJjZSArXG4gICAgICAgICAgICAnfCg/PVteXCJcXHJcXG5dKSknICsgLy8gbWFpbiBsb29wXG4gICAgICAgICAgICAnKD86JyArXG4gICAgICAgICAgICAoL1teXFxzXFxcXF0vLnNvdXJjZSArIC8vIGhhbmRsZSBzcGFjZXMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIHF1b3Rlc1xuICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAnWyBcXHRdKyg/Oig/IVsgXFx0XCJdKXwnICtcbiAgICAgICAgICAgICAgcXVvdGVzU291cmNlICtcbiAgICAgICAgICAgICAgJyknICsgLy8gbGluZSBjb250aW51YXRpb25cbiAgICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgICAgL1xcXFxbXFxyXFxuXSsoPzpbIztdLipbXFxyXFxuXSspKig/IVsjO10pLy5zb3VyY2UpICtcbiAgICAgICAgICAgICcpKidcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ2F0dHItdmFsdWUnLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBjb21tZW50OiBjb21tZW50LFxuICAgICAgICAgIHF1b3RlZDoge1xuICAgICAgICAgICAgcGF0dGVybjogUmVnRXhwKC8oXnxcXHMpLy5zb3VyY2UgKyBxdW90ZXNTb3VyY2UpLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9cXFxcJC9tLFxuICAgICAgICAgIGJvb2xlYW46IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eKD86ZmFsc2V8bm98b2ZmfG9ufHRydWV8eWVzKSQvLFxuICAgICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC89L1xuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/systemd.js\n"));

/***/ })

}]);