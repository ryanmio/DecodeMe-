"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_maxscript"],{

/***/ "./node_modules/refractor/lang/maxscript.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/maxscript.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = maxscript\nmaxscript.displayName = 'maxscript'\nmaxscript.aliases = []\nfunction maxscript(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\\b/i\n    Prism.languages.maxscript = {\n      comment: {\n        pattern: /\\/\\*[\\s\\S]*?(?:\\*\\/|$)|--.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /(^|[^\"\\\\@])(?:\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|@\"[^\"]*\")/,\n        lookbehind: true,\n        greedy: true\n      },\n      path: {\n        pattern: /\\$(?:[\\w/\\\\.*?]|'[^']*')*/,\n        greedy: true,\n        alias: 'string'\n      },\n      'function-call': {\n        pattern: RegExp(\n          '((?:' + // start of line\n            (/^/.source +\n              '|' + // operators and other language constructs\n              /[;=<>+\\-*/^({\\[]/.source +\n              '|' + // keywords as part of statements\n              /\\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\\b/\n                .source) +\n            ')[ \\t]*)' +\n            '(?!' +\n            keywords.source +\n            ')' +\n            /[a-z_]\\w*\\b/.source +\n            '(?=[ \\t]*(?:' + // variable\n            ('(?!' +\n              keywords.source +\n              ')' +\n              /[a-z_]/.source +\n              '|' + // number\n              /\\d|-\\.?\\d/.source +\n              '|' + // other expressions or literals\n              /[({'\"$@#?]/.source) +\n            '))',\n          'im'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'function'\n      },\n      'function-definition': {\n        pattern: /(\\b(?:fn|function)\\s+)\\w+\\b/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      argument: {\n        pattern: /\\b[a-z_]\\w*(?=:)/i,\n        alias: 'attr-name'\n      },\n      keyword: keywords,\n      boolean: /\\b(?:false|true)\\b/,\n      time: {\n        pattern:\n          /(^|[^\\w.])(?:(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?[msft])+|\\d+:\\d+(?:\\.\\d*)?)(?![\\w.:])/,\n        lookbehind: true,\n        alias: 'number'\n      },\n      number: [\n        {\n          pattern:\n            /(^|[^\\w.])(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?|0x[a-fA-F0-9]+)(?![\\w.:])/,\n          lookbehind: true\n        },\n        /\\b(?:e|pi)\\b/\n      ],\n      constant: /\\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\\b/,\n      color: {\n        pattern: /\\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\\b/i,\n        alias: 'constant'\n      },\n      operator: /[-+*/<>=!]=?|[&^?]|#(?!\\()/,\n      punctuation: /[()\\[\\]{}.:,;]|#(?=\\()|\\\\$/m\n    }\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbWF4c2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFdBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLDZCQUE2QixJQUFJO0FBQ2pDO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9tYXhzY3JpcHQuanM/ZTcxYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBtYXhzY3JpcHRcbm1heHNjcmlwdC5kaXNwbGF5TmFtZSA9ICdtYXhzY3JpcHQnXG5tYXhzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBtYXhzY3JpcHQoUHJpc20pIHtcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICB2YXIga2V5d29yZHMgPVxuICAgICAgL1xcYig/OmFib3V0fGFuZHxhbmltYXRlfGFzfGF0fGF0dHJpYnV0ZXN8Ynl8Y2FzZXxjYXRjaHxjb2xsZWN0fGNvbnRpbnVlfGNvb3Jkc3lzfGRvfGVsc2V8ZXhpdHxmbnxmb3J8ZnJvbXxmdW5jdGlvbnxnbG9iYWx8aWZ8aW58bG9jYWx8bWFjcm9zY3JpcHR8bWFwcGVkfG1heHxub3R8b2Z8b2ZmfG9ufG9yfHBhcmFtZXRlcnN8cGVyc2lzdGVudHxwbHVnaW58cmNtZW51fHJldHVybnxyb2xsb3V0fHNldHxzdHJ1Y3R8dGhlbnx0aHJvd3x0b3x0b29sfHRyeXx1bmRvfHV0aWxpdHl8d2hlbnx3aGVyZXx3aGlsZXx3aXRoKVxcYi9pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLm1heHNjcmlwdCA9IHtcbiAgICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCl8LS0uKi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cIlxcXFxAXSkoPzpcIig/OlteXCJcXFxcXXxcXFxcW1xcc1xcU10pKlwifEBcIlteXCJdKlwiKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBhdGg6IHtcbiAgICAgICAgcGF0dGVybjogL1xcJCg/OltcXHcvXFxcXC4qP118J1teJ10qJykqLyxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBhbGlhczogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICAnZnVuY3Rpb24tY2FsbCc6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICcoKD86JyArIC8vIHN0YXJ0IG9mIGxpbmVcbiAgICAgICAgICAgICgvXi8uc291cmNlICtcbiAgICAgICAgICAgICAgJ3wnICsgLy8gb3BlcmF0b3JzIGFuZCBvdGhlciBsYW5ndWFnZSBjb25zdHJ1Y3RzXG4gICAgICAgICAgICAgIC9bOz08PitcXC0qL14oe1xcW10vLnNvdXJjZSArXG4gICAgICAgICAgICAgICd8JyArIC8vIGtleXdvcmRzIGFzIHBhcnQgb2Ygc3RhdGVtZW50c1xuICAgICAgICAgICAgICAvXFxiKD86YW5kfGJ5fGNhc2V8Y2F0Y2h8Y29sbGVjdHxkb3xlbHNlfGlmfGlufG5vdHxvcnxyZXR1cm58dGhlbnx0b3x0cnl8d2hlcmV8d2hpbGV8d2l0aClcXGIvXG4gICAgICAgICAgICAgICAgLnNvdXJjZSkgK1xuICAgICAgICAgICAgJylbIFxcdF0qKScgK1xuICAgICAgICAgICAgJyg/IScgK1xuICAgICAgICAgICAga2V5d29yZHMuc291cmNlICtcbiAgICAgICAgICAgICcpJyArXG4gICAgICAgICAgICAvW2Etel9dXFx3KlxcYi8uc291cmNlICtcbiAgICAgICAgICAgICcoPz1bIFxcdF0qKD86JyArIC8vIHZhcmlhYmxlXG4gICAgICAgICAgICAoJyg/IScgK1xuICAgICAgICAgICAgICBrZXl3b3Jkcy5zb3VyY2UgK1xuICAgICAgICAgICAgICAnKScgK1xuICAgICAgICAgICAgICAvW2Etel9dLy5zb3VyY2UgK1xuICAgICAgICAgICAgICAnfCcgKyAvLyBudW1iZXJcbiAgICAgICAgICAgICAgL1xcZHwtXFwuP1xcZC8uc291cmNlICtcbiAgICAgICAgICAgICAgJ3wnICsgLy8gb3RoZXIgZXhwcmVzc2lvbnMgb3IgbGl0ZXJhbHNcbiAgICAgICAgICAgICAgL1soeydcIiRAIz9dLy5zb3VyY2UpICtcbiAgICAgICAgICAgICcpKScsXG4gICAgICAgICAgJ2ltJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9LFxuICAgICAgJ2Z1bmN0aW9uLWRlZmluaXRpb24nOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxiKD86Zm58ZnVuY3Rpb24pXFxzKylcXHcrXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9LFxuICAgICAgYXJndW1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcYlthLXpfXVxcdyooPz06KS9pLFxuICAgICAgICBhbGlhczogJ2F0dHItbmFtZSdcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiBrZXl3b3JkcyxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgICB0aW1lOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteXFx3Ll0pKD86KD86KD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKSg/OltlRWREXVsrLV1cXGQrfFtMUF0pP1ttc2Z0XSkrfFxcZCs6XFxkKyg/OlxcLlxcZCopPykoPyFbXFx3LjpdKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIG51bWJlcjogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oXnxbXlxcdy5dKSg/Oig/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzpbZUVkRF1bKy1dXFxkK3xbTFBdKT98MHhbYS1mQS1GMC05XSspKD8hW1xcdy46XSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgL1xcYig/OmV8cGkpXFxiL1xuICAgICAgXSxcbiAgICAgIGNvbnN0YW50OiAvXFxiKD86ZG9udGNvbGxlY3R8b2t8c2lsZW50VmFsdWV8dW5kZWZpbmVkfHVuc3VwcGxpZWQpXFxiLyxcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXGIoPzpibGFja3xibHVlfGJyb3dufGdyYXl8Z3JlZW58b3JhbmdlfHJlZHx3aGl0ZXx5ZWxsb3cpXFxiL2ksXG4gICAgICAgIGFsaWFzOiAnY29uc3RhbnQnXG4gICAgICB9LFxuICAgICAgb3BlcmF0b3I6IC9bLSsqLzw+PSFdPT98WyZeP118Iyg/IVxcKCkvLFxuICAgICAgcHVuY3R1YXRpb246IC9bKClcXFtcXF17fS46LDtdfCMoPz1cXCgpfFxcXFwkL21cbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/maxscript.js\n"));

/***/ })

}]);