"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_webIdl"],{

/***/ "./node_modules/refractor/lang/web-idl.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/web-idl.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = webIdl\nwebIdl.displayName = 'webIdl'\nwebIdl.aliases = []\nfunction webIdl(Prism) {\n  ;(function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source\n    var type =\n      '(?:' +\n      /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source +\n      '|' +\n      /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source +\n      '|' +\n      /(?!(?:unrestricted|unsigned)\\b)/.source +\n      id +\n      /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +\n      ')' +\n      /(?:\\s*\\?)?/.source\n    var typeInside = {}\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source +\n              type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // callback return type\n          pattern: RegExp(\n            '(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // typedef\n          pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/\n              .source + id\n          ),\n          lookbehind: true\n        },\n        {\n          // inheritance\n          pattern: RegExp(/(:\\s*)/.source + id),\n          lookbehind: true\n        }, // includes and implements\n        RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\n        {\n          pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n          lookbehind: true\n        },\n        {\n          // function return type, parameter types, and dictionary members\n          pattern: RegExp(\n            type +\n              '(?=' +\n              /\\s*(?:\\.{3}\\s*)?/.source +\n              id +\n              /\\s*[(),;=]/.source +\n              ')'\n          ),\n          inside: typeInside\n        }\n      ],\n      builtin:\n        /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [\n        /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n        /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: {\n        pattern:\n          /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    }\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key]\n      }\n    }\n    Prism.languages['webidl'] = Prism.languages['web-idl']\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd2ViLWlkbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsRUFBRTtBQUMxQjtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxvQkFBb0IsRUFBRTtBQUN0Qix5QkFBeUIsTUFBTTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvd2ViLWlkbC5qcz81ZWZiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdlYklkbFxud2ViSWRsLmRpc3BsYXlOYW1lID0gJ3dlYklkbCdcbndlYklkbC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHdlYklkbChQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBpZCA9IC8oPzpcXEItfFxcYl98XFxiKVtBLVphLXpdW1xcdy1dKig/IVtcXHctXSkvLnNvdXJjZVxuICAgIHZhciB0eXBlID1cbiAgICAgICcoPzonICtcbiAgICAgIC9cXGIoPzp1bnNpZ25lZFxccyspP2xvbmdcXHMrbG9uZyg/IVtcXHctXSkvLnNvdXJjZSArXG4gICAgICAnfCcgK1xuICAgICAgL1xcYig/OnVucmVzdHJpY3RlZHx1bnNpZ25lZClcXHMrW2Etel0rKD8hW1xcdy1dKS8uc291cmNlICtcbiAgICAgICd8JyArXG4gICAgICAvKD8hKD86dW5yZXN0cmljdGVkfHVuc2lnbmVkKVxcYikvLnNvdXJjZSArXG4gICAgICBpZCArXG4gICAgICAvKD86XFxzKjwoPzpbXjw+XXw8W148Pl0qPikqPik/Ly5zb3VyY2UgK1xuICAgICAgJyknICtcbiAgICAgIC8oPzpcXHMqXFw/KT8vLnNvdXJjZVxuICAgIHZhciB0eXBlSW5zaWRlID0ge31cbiAgICBQcmlzbS5sYW5ndWFnZXNbJ3dlYi1pZGwnXSA9IHtcbiAgICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcL1xcLy4qfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogL1wiW15cIl0qXCIvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBuYW1lc3BhY2U6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKC8oXFxibmFtZXNwYWNlXFxzKykvLnNvdXJjZSArIGlkKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgIC8oXnxbXlxcdy1dKSg/Oml0ZXJhYmxlfG1hcGxpa2V8c2V0bGlrZSlcXHMqPCg/OltePD5dfDxbXjw+XSo+KSo+LyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogdHlwZUluc2lkZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgLyhcXGIoPzphdHRyaWJ1dGV8Y29uc3R8ZGVsZXRlcnxnZXR0ZXJ8b3B0aW9uYWx8c2V0dGVyKVxccyspLy5zb3VyY2UgK1xuICAgICAgICAgICAgICB0eXBlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogdHlwZUluc2lkZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLy8gY2FsbGJhY2sgcmV0dXJuIHR5cGVcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgICAnKCcgKyAvXFxiY2FsbGJhY2tcXHMrLy5zb3VyY2UgKyBpZCArIC9cXHMqPVxccyovLnNvdXJjZSArICcpJyArIHR5cGVcbiAgICAgICAgICApLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB0eXBlSW5zaWRlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyB0eXBlZGVmXG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKC8oXFxidHlwZWRlZlxcYlxccyopLy5zb3VyY2UgKyB0eXBlKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogdHlwZUluc2lkZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgLyhcXGIoPzpjYWxsYmFja3xkaWN0aW9uYXJ5fGVudW18aW50ZXJmYWNlKD86XFxzK21peGluKT8pXFxzKykoPyEoPzppbnRlcmZhY2V8bWl4aW4pXFxiKS9cbiAgICAgICAgICAgICAgLnNvdXJjZSArIGlkXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBpbmhlcml0YW5jZVxuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cCgvKDpcXHMqKS8uc291cmNlICsgaWQpLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSwgLy8gaW5jbHVkZXMgYW5kIGltcGxlbWVudHNcbiAgICAgICAgUmVnRXhwKGlkICsgLyg/PVxccysoPzppbXBsZW1lbnRzfGluY2x1ZGVzKVxcYikvLnNvdXJjZSksXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoLyhcXGIoPzppbXBsZW1lbnRzfGluY2x1ZGVzKVxccyspLy5zb3VyY2UgKyBpZCksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLy8gZnVuY3Rpb24gcmV0dXJuIHR5cGUsIHBhcmFtZXRlciB0eXBlcywgYW5kIGRpY3Rpb25hcnkgbWVtYmVyc1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAgIHR5cGUgK1xuICAgICAgICAgICAgICAnKD89JyArXG4gICAgICAgICAgICAgIC9cXHMqKD86XFwuezN9XFxzKik/Ly5zb3VyY2UgK1xuICAgICAgICAgICAgICBpZCArXG4gICAgICAgICAgICAgIC9cXHMqWygpLDs9XS8uc291cmNlICtcbiAgICAgICAgICAgICAgJyknXG4gICAgICAgICAgKSxcbiAgICAgICAgICBpbnNpZGU6IHR5cGVJbnNpZGVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGJ1aWx0aW46XG4gICAgICAgIC9cXGIoPzpBcnJheUJ1ZmZlcnxCaWdJbnQ2NEFycmF5fEJpZ1VpbnQ2NEFycmF5fEJ5dGVTdHJpbmd8RE9NU3RyaW5nfERhdGFWaWV3fEZsb2F0MzJBcnJheXxGbG9hdDY0QXJyYXl8RnJvemVuQXJyYXl8SW50MTZBcnJheXxJbnQzMkFycmF5fEludDhBcnJheXxPYnNlcnZhYmxlQXJyYXl8UHJvbWlzZXxVU1ZTdHJpbmd8VWludDE2QXJyYXl8VWludDMyQXJyYXl8VWludDhBcnJheXxVaW50OENsYW1wZWRBcnJheSlcXGIvLFxuICAgICAga2V5d29yZDogW1xuICAgICAgICAvXFxiKD86YXN5bmN8YXR0cmlidXRlfGNhbGxiYWNrfGNvbnN0fGNvbnN0cnVjdG9yfGRlbGV0ZXJ8ZGljdGlvbmFyeXxlbnVtfGdldHRlcnxpbXBsZW1lbnRzfGluY2x1ZGVzfGluaGVyaXR8aW50ZXJmYWNlfG1peGlufG5hbWVzcGFjZXxudWxsfG9wdGlvbmFsfG9yfHBhcnRpYWx8cmVhZG9ubHl8cmVxdWlyZWR8c2V0dGVyfHN0YXRpY3xzdHJpbmdpZmllcnx0eXBlZGVmfHVucmVzdHJpY3RlZClcXGIvLCAvLyB0eXBlIGtleXdvcmRzXG4gICAgICAgIC9cXGIoPzphbnl8YmlnaW50fGJvb2xlYW58Ynl0ZXxkb3VibGV8ZmxvYXR8aXRlcmFibGV8bG9uZ3xtYXBsaWtlfG9iamVjdHxvY3RldHxyZWNvcmR8c2VxdWVuY2V8c2V0bGlrZXxzaG9ydHxzeW1ib2x8dW5kZWZpbmVkfHVuc2lnbmVkfHZvaWQpXFxiL1xuICAgICAgXSxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgICBudW1iZXI6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W15cXHctXSktPyg/OjB4WzAtOWEtZl0rfCg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT98TmFOfEluZmluaXR5KSg/IVtcXHctXSkvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG9wZXJhdG9yOiAvXFwuezN9fFs9Oj88Pi1dLyxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpe31bXFxdLiw7XS9cbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIFByaXNtLmxhbmd1YWdlc1snd2ViLWlkbCddKSB7XG4gICAgICBpZiAoa2V5ICE9PSAnY2xhc3MtbmFtZScpIHtcbiAgICAgICAgdHlwZUluc2lkZVtrZXldID0gUHJpc20ubGFuZ3VhZ2VzWyd3ZWItaWRsJ11ba2V5XVxuICAgICAgfVxuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXNbJ3dlYmlkbCddID0gUHJpc20ubGFuZ3VhZ2VzWyd3ZWItaWRsJ11cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/web-idl.js\n"));

/***/ })

}]);