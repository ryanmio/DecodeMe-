"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_docker"],{

/***/ "./node_modules/refractor/lang/docker.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/docker.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = docker\ndocker.displayName = 'docker'\ndocker.aliases = ['dockerfile']\nfunction docker(Prism) {\n  ;(function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash =\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\n      /<SP_BS>/g,\n      function () {\n        return spaceAfterBackSlash\n      }\n    )\n    var string =\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\n        .source\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\n      /<STR>/g,\n      function () {\n        return string\n      }\n    )\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    }\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<OPT>/g, function () {\n          return option\n        })\n        .replace(/<SP>/g, function () {\n          return space\n        })\n      return RegExp(source, flags)\n    }\n    Prism.languages.docker = {\n      instruction: {\n        pattern:\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\n              'i'\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [\n                stringRule,\n                {\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                  lookbehind: true\n                }\n              ],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [\n            {\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#from\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#onbuild\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /^\\w+/,\n              greedy: true\n            }\n          ],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    }\n    Prism.languages.dockerfile = Prism.languages.docker\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvZG9ja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxJQUFJLFFBQVE7QUFDNUM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2RvY2tlci5qcz80MjQzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRvY2tlclxuZG9ja2VyLmRpc3BsYXlOYW1lID0gJ2RvY2tlcidcbmRvY2tlci5hbGlhc2VzID0gWydkb2NrZXJmaWxlJ11cbmZ1bmN0aW9uIGRvY2tlcihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8vIE1hbnkgb2YgdGhlIGZvbGxvd2luZyByZWdleGVzIHdpbGwgY29udGFpbiBuZWdhdGVkIGxvb2thaGVhZHMgbGlrZSBgWyBcXHRdKyg/IVsgXFx0XSlgLiBUaGlzIGlzIGEgdHJpY2sgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBxdWFudGlmaWVycyBiZWhhdmUgKmF0b21pY2FsbHkqLiBBdG9taWMgcXVhbnRpZmllcnMgYXJlIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGV4cG9uZW50aWFsIGJhY2t0cmFja2luZy5cbiAgICB2YXIgc3BhY2VBZnRlckJhY2tTbGFzaCA9XG4gICAgICAvXFxcXFtcXHJcXG5dKD86XFxzfFxcXFxbXFxyXFxuXXwjLiooPyEuKSkqKD8hW1xccyNdfFxcXFxbXFxyXFxuXSkvLnNvdXJjZSAvLyBBdCBsZWFzdCBvbmUgc3BhY2UsIGNvbW1lbnQsIG9yIGxpbmUgYnJlYWtcbiAgICB2YXIgc3BhY2UgPSAvKD86WyBcXHRdKyg/IVsgXFx0XSkoPzo8U1BfQlM+KT98PFNQX0JTPikvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgLzxTUF9CUz4vZyxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNwYWNlQWZ0ZXJCYWNrU2xhc2hcbiAgICAgIH1cbiAgICApXG4gICAgdmFyIHN0cmluZyA9XG4gICAgICAvXCIoPzpbXlwiXFxcXFxcclxcbl18XFxcXCg/OlxcclxcbnxbXFxzXFxTXSkpKlwifCcoPzpbXidcXFxcXFxyXFxuXXxcXFxcKD86XFxyXFxufFtcXHNcXFNdKSkqJy9cbiAgICAgICAgLnNvdXJjZVxuICAgIHZhciBvcHRpb24gPSAvLS1bXFx3LV0rPSg/OjxTVFI+fCg/IVtcIiddKSg/OlteXFxzXFxcXF18XFxcXC4pKykvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgLzxTVFI+L2csXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgIH1cbiAgICApXG4gICAgdmFyIHN0cmluZ1J1bGUgPSB7XG4gICAgICBwYXR0ZXJuOiBSZWdFeHAoc3RyaW5nKSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgICB2YXIgY29tbWVudFJ1bGUgPSB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKSMuKi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZsYWdzXG4gICAgICogQHJldHVybnMge1JlZ0V4cH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZShzb3VyY2UsIGZsYWdzKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2VcbiAgICAgICAgLnJlcGxhY2UoLzxPUFQ+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uXG4gICAgICAgIH0pXG4gICAgICAgIC5yZXBsYWNlKC88U1A+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3BhY2VcbiAgICAgICAgfSlcbiAgICAgIHJldHVybiBSZWdFeHAoc291cmNlLCBmbGFncylcbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmRvY2tlciA9IHtcbiAgICAgIGluc3RydWN0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyheWyBcXHRdKikoPzpBRER8QVJHfENNRHxDT1BZfEVOVFJZUE9JTlR8RU5WfEVYUE9TRXxGUk9NfEhFQUxUSENIRUNLfExBQkVMfE1BSU5UQUlORVJ8T05CVUlMRHxSVU58U0hFTEx8U1RPUFNJR05BTHxVU0VSfFZPTFVNRXxXT1JLRElSKSg/PVxccykoPzpcXFxcLnxbXlxcclxcblxcXFxdKSooPzpcXFxcJCg/Olxcc3wjLiokKSooPyFbXFxzI10pKD86XFxcXC58W15cXHJcXG5cXFxcXSkqKSovaW0sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgcGF0dGVybjogcmUoXG4gICAgICAgICAgICAgIC8oXig/Ok9OQlVJTEQ8U1A+KT9cXHcrPFNQPik8T1BUPig/OjxTUD48T1BUPikqLy5zb3VyY2UsXG4gICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICAgcHJvcGVydHk6IHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF58XFxzKS0tW1xcdy1dKy8sXG4gICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdHJpbmc6IFtcbiAgICAgICAgICAgICAgICBzdHJpbmdSdWxlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oPSkoPyFbXCInXSkoPzpbXlxcc1xcXFxdfFxcXFwuKSsvLFxuICAgICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgb3BlcmF0b3I6IC9cXFxcJC9tLFxuICAgICAgICAgICAgICBwdW5jdHVhdGlvbjogLz0vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXl3b3JkOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2VuZ2luZS9yZWZlcmVuY2UvYnVpbGRlci8jaGVhbHRoY2hlY2tcbiAgICAgICAgICAgICAgcGF0dGVybjogcmUoXG4gICAgICAgICAgICAgICAgLyheKD86T05CVUlMRDxTUD4pP0hFQUxUSENIRUNLPFNQPig/OjxPUFQ+PFNQPikqKSg/OkNNRHxOT05FKVxcYi9cbiAgICAgICAgICAgICAgICAgIC5zb3VyY2UsXG4gICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNmcm9tXG4gICAgICAgICAgICAgIHBhdHRlcm46IHJlKFxuICAgICAgICAgICAgICAgIC8oXig/Ok9OQlVJTEQ8U1A+KT9GUk9NPFNQPig/OjxPUFQ+PFNQPikqKD8hLS0pW14gXFx0XFxcXF0rPFNQPilBUy9cbiAgICAgICAgICAgICAgICAgIC5zb3VyY2UsXG4gICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNvbmJ1aWxkXG4gICAgICAgICAgICAgIHBhdHRlcm46IHJlKC8oXk9OQlVJTEQ8U1A+KVxcdysvLnNvdXJjZSwgJ2knKSxcbiAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvXlxcdysvLFxuICAgICAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGNvbW1lbnQ6IGNvbW1lbnRSdWxlLFxuICAgICAgICAgIHN0cmluZzogc3RyaW5nUnVsZSxcbiAgICAgICAgICB2YXJpYWJsZTogL1xcJCg/Olxcdyt8XFx7W157fVwiJ1xcXFxdKlxcfSkvLFxuICAgICAgICAgIG9wZXJhdG9yOiAvXFxcXCQvbVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29tbWVudDogY29tbWVudFJ1bGVcbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmRvY2tlcmZpbGUgPSBQcmlzbS5sYW5ndWFnZXMuZG9ja2VyXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/docker.js\n"));

/***/ })

}]);