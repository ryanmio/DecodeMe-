"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_javadoclike"],{

/***/ "./node_modules/refractor/lang/javadoclike.js":
/*!****************************************************!*\
  !*** ./node_modules/refractor/lang/javadoclike.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvamF2YWRvY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLEVBQUU7QUFDM0I7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnQ0FBZ0MsRUFBRSxpQkFBaUI7QUFDbkQ7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCO0FBQ3ZCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxXQUFXLFNBQVMsaUJBQWlCLFdBQVc7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxPQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2phdmFkb2NsaWtlLmpzPzYyM2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gamF2YWRvY2xpa2VcbmphdmFkb2NsaWtlLmRpc3BsYXlOYW1lID0gJ2phdmFkb2NsaWtlJ1xuamF2YWRvY2xpa2UuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBqYXZhZG9jbGlrZShQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBqYXZhRG9jTGlrZSA9IChQcmlzbS5sYW5ndWFnZXMuamF2YWRvY2xpa2UgPSB7XG4gICAgICBwYXJhbWV0ZXI6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF5bXFx0IF0qKD86XFwvezN9fFxcKnxcXC9cXCpcXCopXFxzKkAoPzphcmd8YXJndW1lbnRzfHBhcmFtKVxccyspXFx3Ky9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAga2V5d29yZDoge1xuICAgICAgICAvLyBrZXl3b3JkcyBhcmUgdGhlIGZpcnN0IHdvcmQgaW4gYSBsaW5lIHByZWNlZGVkIGJlIGFuIGBAYCBvciBzdXJyb3VuZGVkIGJ5IGN1cmx5IGJyYWNlcy5cbiAgICAgICAgLy8gQHdvcmQsIHtAd29yZH1cbiAgICAgICAgcGF0dGVybjogLyheW1xcdCBdKig/OlxcL3szfXxcXCp8XFwvXFwqXFwqKVxccyp8XFx7KUBbYS16XVthLXpBLVotXStcXGIvbSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvW3t9XS9cbiAgICB9KVxuICAgIC8qKlxuICAgICAqIEFkZHMgZG9jIGNvbW1lbnQgc3VwcG9ydCB0byB0aGUgZ2l2ZW4gbGFuZ3VhZ2UgYW5kIGNhbGxzIGEgZ2l2ZW4gY2FsbGJhY2sgb24gZWFjaCBkb2MgY29tbWVudCBwYXR0ZXJuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmcgdGhlIGxhbmd1YWdlIGFkZCBkb2MgY29tbWVudCBzdXBwb3J0IHRvLlxuICAgICAqIEBwYXJhbSB7KHBhdHRlcm46IHtpbnNpZGU6IHtyZXN0OiB1bmRlZmluZWR9fSkgPT4gdm9pZH0gY2FsbGJhY2sgdGhlIGZ1bmN0aW9uIGNhbGxlZCB3aXRoIGVhY2ggZG9jIGNvbW1lbnQgcGF0dGVybiBhcyBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb2NDb21tZW50U3VwcG9ydChsYW5nLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRva2VuTmFtZSA9ICdkb2MtY29tbWVudCdcbiAgICAgIHZhciBncmFtbWFyID0gUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG4gICAgICBpZiAoIWdyYW1tYXIpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgdG9rZW4gPSBncmFtbWFyW3Rva2VuTmFtZV1cbiAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgLy8gYWRkIGRvYyBjb21tZW50OiAvKiogKi9cbiAgICAgICAgdmFyIGRlZmluaXRpb24gPSB7fVxuICAgICAgICBkZWZpbml0aW9uW3Rva2VuTmFtZV0gPSB7XG4gICAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqXFwqW14vXVtcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdjb21tZW50J1xuICAgICAgICB9XG4gICAgICAgIGdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKGxhbmcsICdjb21tZW50JywgZGVmaW5pdGlvbilcbiAgICAgICAgdG9rZW4gPSBncmFtbWFyW3Rva2VuTmFtZV1cbiAgICAgIH1cbiAgICAgIGlmICh0b2tlbiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAvLyBjb252ZXJ0IHJlZ2V4IHRvIG9iamVjdFxuICAgICAgICB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXSA9IHtcbiAgICAgICAgICBwYXR0ZXJuOiB0b2tlblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b2tlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAodG9rZW5baV0gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIHRva2VuW2ldID0ge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiB0b2tlbltpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayh0b2tlbltpXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodG9rZW4pXG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgZG9jLWNvbW1lbnQgc3VwcG9ydCB0byB0aGUgZ2l2ZW4gbGFuZ3VhZ2VzIGZvciB0aGUgZ2l2ZW4gZG9jdW1lbnRhdGlvbiBsYW5ndWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW118c3RyaW5nfSBsYW5ndWFnZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZG9jTGFuZ3VhZ2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRTdXBwb3J0KGxhbmd1YWdlcywgZG9jTGFuZ3VhZ2UpIHtcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzID09PSAnc3RyaW5nJykge1xuICAgICAgICBsYW5ndWFnZXMgPSBbbGFuZ3VhZ2VzXVxuICAgICAgfVxuICAgICAgbGFuZ3VhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGxhbmcpIHtcbiAgICAgICAgZG9jQ29tbWVudFN1cHBvcnQobGFuZywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgICBpZiAoIXBhdHRlcm4uaW5zaWRlKSB7XG4gICAgICAgICAgICBwYXR0ZXJuLmluc2lkZSA9IHt9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhdHRlcm4uaW5zaWRlLnJlc3QgPSBkb2NMYW5ndWFnZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGphdmFEb2NMaWtlLCAnYWRkU3VwcG9ydCcsIHtcbiAgICAgIHZhbHVlOiBhZGRTdXBwb3J0XG4gICAgfSlcbiAgICBqYXZhRG9jTGlrZS5hZGRTdXBwb3J0KFsnamF2YScsICdqYXZhc2NyaXB0JywgJ3BocCddLCBqYXZhRG9jTGlrZSlcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/javadoclike.js\n"));

/***/ })

}]);