"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_sml"],{

/***/ "./node_modules/refractor/lang/sml.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/sml.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = sml\nsml.displayName = 'sml'\nsml.aliases = ['smlnj']\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment:\n        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [\n        {\n          // This is only an approximation since the real grammar is context-free\n          //\n          // Why the main loop so complex?\n          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n          // followed by a long identifier.\n          pattern: RegExp(\n            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n              .replace(/<NOT-LAST>/g, function () {\n                return /\\s*(?:[*,]|->)/.source\n              })\n              .replace(/<TERMINAL>/g, function () {\n                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\n                  .source\n              })\n              .replace(/<LONG-ID>/g, function () {\n                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\n              })\n              .replace(/<KEYWORD>/g, function () {\n                return keywords.source\n              }),\n            'i'\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        {\n          pattern:\n            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      boolean: /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    }\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\n    Prism.languages.smlnj = Prism.languages.sml\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc21sLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EseUVBQXlFLE9BQU8sSUFBSSxJQUFJLElBQUksSUFBSTtBQUNoRztBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc21sLmpzP2U4YTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gc21sXG5zbWwuZGlzcGxheU5hbWUgPSAnc21sJ1xuc21sLmFsaWFzZXMgPSBbJ3NtbG5qJ11cbmZ1bmN0aW9uIHNtbChQcmlzbSkge1xuICAvLyBodHRwczovL3NtbGZhbWlseS5naXRodWIuaW8vc21sOTctZGVmbi5wZGZcbiAgLy8gaHR0cHM6Ly9wZW9wbGUubXBpLXN3cy5vcmcvfnJvc3NiZXJnL3NtbC5odG1sXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGtleXdvcmRzID1cbiAgICAgIC9cXGIoPzphYnN0eXBlfGFuZHxhbmRhbHNvfGFzfGNhc2V8ZGF0YXR5cGV8ZG98ZWxzZXxlbmR8ZXF0eXBlfGV4Y2VwdGlvbnxmbnxmdW58ZnVuY3RvcnxoYW5kbGV8aWZ8aW58aW5jbHVkZXxpbmZpeHxpbmZpeHJ8bGV0fGxvY2FsfG5vbmZpeHxvZnxvcHxvcGVufG9yZWxzZXxyYWlzZXxyZWN8c2hhcmluZ3xzaWd8c2lnbmF0dXJlfHN0cnVjdHxzdHJ1Y3R1cmV8dGhlbnx0eXBlfHZhbHx3aGVyZXx3aGlsZXx3aXRofHdpdGh0eXBlKVxcYi9pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnNtbCA9IHtcbiAgICAgIC8vIGFsbG93IG9uZSBsZXZlbCBvZiBuZXN0aW5nXG4gICAgICBjb21tZW50OlxuICAgICAgICAvXFwoXFwqKD86W14qKF18XFwqKD8hXFwpKXxcXCgoPyFcXCopfFxcKFxcKig/OlteKihdfFxcKig/IVxcKSl8XFwoKD8hXFwqKSkqXFwqXFwpKSpcXCpcXCkvLFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC8jP1wiKD86W15cIlxcXFxdfFxcXFwuKSpcIi8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgICB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBvbmx5IGFuIGFwcHJveGltYXRpb24gc2luY2UgdGhlIHJlYWwgZ3JhbW1hciBpcyBjb250ZXh0LWZyZWVcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdoeSB0aGUgbWFpbiBsb29wIHNvIGNvbXBsZXg/XG4gICAgICAgICAgLy8gVGhlIG1haW4gbG9vcCBpcyBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGFzIC8oPzpcXHMqKD86WyosXXwtPilcXHMqPFRFUk1JTkFMPikqLyB3aGljaCBpcywgb2J2aW91c2x5LCBhIGxvdFxuICAgICAgICAgIC8vIHNpbXBsZXIuIFRoZSBkaWZmZXJlbmNlIGlzIHRoYXQgaWYgYSBjb21tYSBpcyB0aGUgbGFzdCBpdGVyYXRpb24gb2YgdGhlIGxvb3AsIHRoZW4gdGhlIHRlcm1pbmFsIG11c3QgYmVcbiAgICAgICAgICAvLyBmb2xsb3dlZCBieSBhIGxvbmcgaWRlbnRpZmllci5cbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgICAvKCg/Ol58W146XSk6XFxzKik8VEVSTUlOQUw+KD86XFxzKig/Oig/OlxcKnwtPilcXHMqPFRFUk1JTkFMPnwsXFxzKjxURVJNSU5BTD4oPzooPz08Tk9ULUxBU1Q+KXwoPyE8Tk9ULUxBU1Q+KVxccys8TE9ORy1JRD4pKSkqLy5zb3VyY2VcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzxOT1QtTEFTVD4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvXFxzKig/OlsqLF18LT4pLy5zb3VyY2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzxURVJNSU5BTD4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKD86J1tcXHcnXSp8PExPTkctSUQ+fFxcKCg/OlteKCldfFxcKFteKCldKlxcKSkqXFwpfFxceyg/Oltee31dfFxce1tee31dKlxcfSkqXFx9KSg/Olxccys8TE9ORy1JRD4pKi9cbiAgICAgICAgICAgICAgICAgIC5zb3VyY2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzxMT05HLUlEPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8oPyE8S0VZV09SRD4pW2EtelxcZF9dW1xcdycuXSovLnNvdXJjZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAucmVwbGFjZSgvPEtFWVdPUkQ+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5d29yZHMuc291cmNlXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IG51bGwgLy8gc2VlIGJlbG93XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgLygoPzpefFteXFx3J10pKD86ZGF0YXR5cGV8ZXhjZXB0aW9ufGZ1bmN0b3J8c2lnbmF0dXJlfHN0cnVjdHVyZXx0eXBlKVxccyspW2Etel9dW1xcdycuXSovaSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKCg/Ol58W15cXHcnXSlmdW5cXHMrKVthLXpfXVtcXHcnLl0qL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiBrZXl3b3JkcyxcbiAgICAgIHZhcmlhYmxlOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcdyddKSdbXFx3J10qLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG51bWJlcjogL34/XFxiKD86XFxkKyg/OlxcLlxcZCspPyg/OmV+P1xcZCspP3wweFtcXGRhLWZdKylcXGIvaSxcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgcGF0dGVybjogL1xcYjB3KD86XFxkK3x4W1xcZGEtZl0rKVxcYi9pLFxuICAgICAgICBhbGlhczogJ2NvbnN0YW50J1xuICAgICAgfSxcbiAgICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi9pLFxuICAgICAgb3BlcmF0b3I6IC9cXC5cXC5cXC58Ols+PTpdfD0+P3wtPnxbPD5dPT98WyErXFwtKi9eI3xAfl0vLFxuICAgICAgcHVuY3R1YXRpb246IC9bKCl7fVxcW1xcXS46LDtdL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuc21sWydjbGFzcy1uYW1lJ11bMF0uaW5zaWRlID0gUHJpc20ubGFuZ3VhZ2VzLnNtbFxuICAgIFByaXNtLmxhbmd1YWdlcy5zbWxuaiA9IFByaXNtLmxhbmd1YWdlcy5zbWxcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/sml.js\n"));

/***/ })

}]);