"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_v"],{

/***/ "./node_modules/refractor/lang/v.js":
/*!******************************************!*\
  !*** ./node_modules/refractor/lang/v.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = v\nv.displayName = 'v'\nv.aliases = []\nfunction v(Prism) {\n  ;(function (Prism) {\n    var interpolationExpr = {\n      pattern: /[\\s\\S]+/,\n      inside: null\n    }\n    Prism.languages.v = Prism.languages.extend('clike', {\n      string: {\n        pattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        alias: 'quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern:\n              /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,\n            lookbehind: true,\n            inside: {\n              'interpolation-variable': {\n                pattern: /^\\$\\w[\\s\\S]*$/,\n                alias: 'variable'\n              },\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              'interpolation-expression': interpolationExpr\n            }\n          }\n        }\n      },\n      'class-name': {\n        pattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?\\w+/,\n        lookbehind: true\n      },\n      keyword:\n        /(?:\\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:else|for|if)|#(?:flag|include))\\b/,\n      number:\n        /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,\n      operator:\n        /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,\n      builtin:\n        /\\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/\n    })\n    interpolationExpr.inside = Prism.languages.v\n    Prism.languages.insertBefore('v', 'string', {\n      char: {\n        pattern: /`(?:\\\\`|\\\\?[^`]{1,2})`/,\n        // using {1,2} instead of `u` flag for compatibility\n        alias: 'rune'\n      }\n    })\n    Prism.languages.insertBefore('v', 'operator', {\n      attribute: {\n        pattern:\n          /(^[\\t ]*)\\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\\]/m,\n        lookbehind: true,\n        alias: 'annotation',\n        inside: {\n          punctuation: /[\\[\\]]/,\n          keyword: /\\w+/\n        }\n      },\n      generic: {\n        pattern: /<\\w+>(?=\\s*[\\)\\{])/,\n        inside: {\n          punctuation: /[<>]/,\n          'class-name': /\\w+/\n        }\n      }\n    })\n    Prism.languages.insertBefore('v', 'function', {\n      'generic-function': {\n        // e.g. foo<T>( ...\n        pattern: /\\b\\w+\\s*<\\w+>(?=\\()/,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<\\w+>/,\n            inside: Prism.languages.v.generic.inside\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdi5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsRUFBRSxVQUFVLElBQUksSUFBSTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsK0JBQStCLEdBQUc7QUFDbEM7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEMsa0JBQWtCLEtBQUs7QUFDdkI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL3YuanM/MGY5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB2XG52LmRpc3BsYXlOYW1lID0gJ3YnXG52LmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24gdihQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBpbnRlcnBvbGF0aW9uRXhwciA9IHtcbiAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgaW5zaWRlOiBudWxsXG4gICAgfVxuICAgIFByaXNtLmxhbmd1YWdlcy52ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogL3I/KFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgICAgICBhbGlhczogJ3F1b3RlZC1zdHJpbmcnLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgICAgIC8oKD86XnxbXlxcXFxdKSg/OlxcXFx7Mn0pKilcXCQoPzpcXHtbXnt9XSpcXH18XFx3Kyg/OlxcLlxcdysoPzpcXChbXlxcKFxcKV0qXFwpKT98XFxbW15cXFtcXF1dK1xcXSkqKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAgICdpbnRlcnBvbGF0aW9uLXZhcmlhYmxlJzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9eXFwkXFx3W1xcc1xcU10qJC8sXG4gICAgICAgICAgICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICAgICAgcGF0dGVybjogL15cXCRcXHt8XFx9JC8sXG4gICAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ2ludGVycG9sYXRpb24tZXhwcmVzc2lvbic6IGludGVycG9sYXRpb25FeHByXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxiKD86ZW51bXxpbnRlcmZhY2V8c3RydWN0fHR5cGUpXFxzKykoPzpDXFwuKT9cXHcrLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgIC8oPzpcXGIoPzpfX2dsb2JhbHxhc3xhc218YXNzZXJ0fGF0b21pY3xicmVha3xjaGFufGNvbnN0fGNvbnRpbnVlfGRlZmVyfGVsc2V8ZW1iZWR8ZW51bXxmbnxmb3J8Z28oPzp0byk/fGlmfGltcG9ydHxpbnxpbnRlcmZhY2V8aXN8bG9ja3xtYXRjaHxtb2R1bGV8bXV0fG5vbmV8b3J8cHVifHJldHVybnxybG9ja3xzZWxlY3R8c2hhcmVkfHNpemVvZnxzdGF0aWN8c3RydWN0fHR5cGUoPzpvZik/fHVuaW9ufHVuc2FmZSl8XFwkKD86ZWxzZXxmb3J8aWYpfCMoPzpmbGFnfGluY2x1ZGUpKVxcYi8sXG4gICAgICBudW1iZXI6XG4gICAgICAgIC9cXGIoPzoweFthLWZcXGRdKyg/Ol9bYS1mXFxkXSspKnwwYlswMV0rKD86X1swMV0rKSp8MG9bMC03XSsoPzpfWzAtN10rKSp8XFxkKyg/Ol9cXGQrKSooPzpcXC5cXGQrKD86X1xcZCspKik/KVxcYi9pLFxuICAgICAgb3BlcmF0b3I6XG4gICAgICAgIC9+fFxcP3xbKlxcLyVeIT1dPT98XFwrWz0rXT98LVs9LV0/fFxcfFs9fF0/fCYoPzo9fCZ8XFxePT8pP3w+KD86Pj0/fD0pP3w8KD86PD0/fD18LSk/fDo9fFxcLlxcLlxcLj8vLFxuICAgICAgYnVpbHRpbjpcbiAgICAgICAgL1xcYig/OmFueSg/Ol9mbG9hdHxfaW50KT98Ym9vbHxieXRlKD86cHRyKT98Y2hhcnB0cnxmKD86MzJ8NjQpfGkoPzo4fDE2fDY0fDEyOHxudCl8cnVuZXxzaXplX3R8c3RyaW5nfHUoPzoxNnwzMnw2NHwxMjgpfHZvaWRwdHIpXFxiL1xuICAgIH0pXG4gICAgaW50ZXJwb2xhdGlvbkV4cHIuaW5zaWRlID0gUHJpc20ubGFuZ3VhZ2VzLnZcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCd2JywgJ3N0cmluZycsIHtcbiAgICAgIGNoYXI6IHtcbiAgICAgICAgcGF0dGVybjogL2AoPzpcXFxcYHxcXFxcP1teYF17MSwyfSlgLyxcbiAgICAgICAgLy8gdXNpbmcgezEsMn0gaW5zdGVhZCBvZiBgdWAgZmxhZyBmb3IgY29tcGF0aWJpbGl0eVxuICAgICAgICBhbGlhczogJ3J1bmUnXG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCd2JywgJ29wZXJhdG9yJywge1xuICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyheW1xcdCBdKilcXFsoPzpkZXByZWNhdGVkfGRpcmVjdF9hcnJheV9hY2Nlc3N8ZmxhZ3xpbmxpbmV8bGl2ZXxyZWZfb25seXx0eXBlZGVmfHVuc2FmZV9mbnx3aW5kb3dzX3N0ZGNhbGwpXFxdL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnYW5ub3RhdGlvbicsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvW1xcW1xcXV0vLFxuICAgICAgICAgIGtleXdvcmQ6IC9cXHcrL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2VuZXJpYzoge1xuICAgICAgICBwYXR0ZXJuOiAvPFxcdys+KD89XFxzKltcXClcXHtdKS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvWzw+XS8sXG4gICAgICAgICAgJ2NsYXNzLW5hbWUnOiAvXFx3Ky9cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgndicsICdmdW5jdGlvbicsIHtcbiAgICAgICdnZW5lcmljLWZ1bmN0aW9uJzoge1xuICAgICAgICAvLyBlLmcuIGZvbzxUPiggLi4uXG4gICAgICAgIHBhdHRlcm46IC9cXGJcXHcrXFxzKjxcXHcrPig/PVxcKCkvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBmdW5jdGlvbjogL15cXHcrLyxcbiAgICAgICAgICBnZW5lcmljOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvPFxcdys+LyxcbiAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLnYuZ2VuZXJpYy5pbnNpZGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/refractor/lang/v.js\n"));

/***/ })

}]);